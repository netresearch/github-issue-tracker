// @see https://pubsubclient.knolleary.net/api
#include <PubSubClient.h>

// Custom classes and configuration
#include "config.h"
#include "message.h"

WiFiClient espClient;
PubSubClient client(espClient);

const uint32_t deviceId = ESP.getChipId();

namespace Mqtt
{

    /***
     * @brief Setup the MQTT class
     * @return void
     */
    void setup()
    {
        Message::info("Setup: MQTT");

        char deviceIdChar[8];
        sprintf(deviceIdChar, "%lu", deviceId);

        // Connection
        client.setServer(MQTT_HOST, MQTT_PORT);
        client.connect(deviceIdChar, MQTT_USER, MQTT_PASSWORD, MQTT_TOPIC_STATUS, 0, false, deviceIdChar);

        if (client.connected())
        {
            Message::success("Connected to MQTT broker");
            Message::info(client.state());
        }
        else
        {
            Message::error("Could not connect to MQTT broker");
        }
        client.loop();
    }

    /**
     * @brief Publish a message to the MQTT broker
     * @param payload The message to publish
     * @return void
     */
    void publish(const char *payload)
    {
        if (client.publish(MQTT_TOPIC, payload))
            Message::success("MQTT published");
        else
            Message::error("MQTT not published");
    }

    /**
     * @brief Replace characters in a string
     *
     * @see https://arduinojson.org/v6/faq/how-to-use-arduinojson-with-pubsubclient/
     *@param str Original string
     *@param orig Character to replace
     *@param rep Replacement character
     *@return int Number of replacements
     */
    int replaceChar(char *str, char orig, char rep)
    {
        char *ix = str;
        int n = 0;
        while ((ix = strchr(ix, orig)) != NULL)
        {
            *ix++ = rep;
            n++;
        }
        return n;
    }
};
